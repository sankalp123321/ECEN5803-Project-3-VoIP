//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/****
*
* new - Declares classes and operators for dynammic memory management.
*
*
****/

#if     _MSC_VER > 1000
#pragma once
#endif

#ifndef __cplusplus
#error This header requires a C++ compiler ...
#endif

#ifndef _NEW_INC_
#define _NEW_INC_

#include <libdefs>
#include <exception>

#ifdef _MSC_VER
#pragma pack(push,_CRT_PACKING)
#pragma warning(push,3)
#pragma warning(disable: 4290) // C++ exception specification ignored...
#endif /* _MSC_VER */

_STDDEFS_BEGIN

class _CRTIMP bad_alloc : public exception {
public:
    bad_alloc(const char* what_arg = "bad allocation") throw()
        : exception (what_arg) {}
    virtual ~bad_alloc() throw()
        {}
};

#ifndef __NOTHROW_T_DEFINED
struct _CRTIMP nothrow_t
    {   // placement new tag type to suppress exceptions
    };
extern const nothrow_t nothrow;
#endif /* __NOTHROW_T_DEFINED */

_STDDEFS_END

typedef void (__CRTDECL * new_handler) ();
_CRTIMP new_handler __CRTDECL set_new_handler(__in_opt new_handler _NewHandler) throw();

_CRTIMP void * __CRTDECL operator new(unsigned int) throw(std::bad_alloc);
_CRTIMP void * __CRTDECL operator new[](unsigned int) throw(std::bad_alloc);

_CRTIMP void __CRTDECL operator delete(void *) throw();
_CRTIMP void __CRTDECL operator delete[]( void *) throw();

#ifndef __NOTHROW_T_DEFINED
#define __NOTHROW_T_DEFINED
_CRTIMP void * __CRTDECL operator new(unsigned int,struct std::nothrow_t const &) throw();
_CRTIMP void * __CRTDECL operator new[](unsigned int,struct std::nothrow_t const &) throw();

_CRTIMP void __CRTDECL operator delete(void *,struct std::nothrow_t const &) throw();
_CRTIMP void __CRTDECL operator delete[]( void *,struct std::nothrow_t const &) throw();
#endif /* __NOTHROW_T_DEFINED */

#ifndef __PLACEMENT_NEW_INLINE
#define __PLACEMENT_NEW_INLINE
inline void * __CRTDECL operator new(size_t, void *_P)
    { return (_P); }
inline void __CRTDECL operator delete(void *, void *)
    {   // delete if placement new fails
    }
inline void *__CRTDECL operator new[](size_t, void *_P)
    { return (_P); }
inline void __CRTDECL operator delete[](void *, void *)
    {   // delete if placement array new fails
    }
#endif
//end of vbug 10417 checkin

#ifdef _MSC_VER
#pragma warning(pop)
#pragma pack(pop)
#endif /* _MSC_VER */

#endif // _NEW_INC_
