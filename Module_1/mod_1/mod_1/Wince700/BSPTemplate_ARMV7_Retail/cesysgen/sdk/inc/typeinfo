//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/****
*
*typeinfo - Defines the type_info structure and exceptions used for RTTI
*
*
*Purpose:
*       Defines the type_info structure and exceptions used for
*       Runtime Type Identification.
*
*       [Public]
****/

#if     _MSC_VER > 1000
#pragma once
#endif

#ifndef __cplusplus
#error This header requires a C++ compiler ...
#endif

#ifndef _INC_TYPEINFO
#define _INC_TYPEINFO

#include <libdefs>
#include <exception>

#ifdef _MSC_VER
#pragma pack(push,_CRT_PACKING)
#endif /* _MSC_VER */


// Return type from typeid operator, according to the standard
// this should really be in namespace std, but the compiler
// has built-in knowledge about this class.  Do not modify
// anything here without checking the layout of RTTI information
// generated by the compiler.

class type_info {
public:
    _CRTIMP virtual ~type_info();
    _CRTIMP int operator==(const type_info& rhs) const;
    _CRTIMP int operator!=(const type_info& rhs) const;
    _CRTIMP int before(const type_info& rhs) const;
    _CRTIMP const char* name() const;
    _CRTIMP const char* raw_name() const;
private:
    void* _m_data;
    char _m_d_name[1];
    type_info(const type_info& rhs);
    type_info& operator=(const type_info& rhs);
};

_STDDEFS_BEGIN

class _CRTIMP bad_cast : public exception {
public:
    bad_cast(const char* what_arg = "bad cast") throw() : exception (what_arg) {}
    virtual ~bad_cast() throw() {}
};

class _CRTIMP bad_typeid : public exception {
public:
    bad_typeid(const char* what_arg = "bad typeid") throw() : exception (what_arg) {}
    virtual ~bad_typeid() throw() {}
};

class _CRTIMP __non_rtti_object : public bad_typeid {
public:
    __non_rtti_object(const char* what_arg) : bad_typeid(what_arg) {}
};

_STDDEFS_END

#ifdef _MSC_VER
#pragma pack(pop)
#endif /* _MSC_VER */

#endif  // _INC_TYPEINFO
