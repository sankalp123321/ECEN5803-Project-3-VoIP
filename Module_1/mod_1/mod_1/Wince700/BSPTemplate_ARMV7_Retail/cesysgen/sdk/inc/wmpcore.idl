//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this source code is subject to the terms of the Microsoft
// premium shared source license agreement under which you licensed
// this source code. If you did not accept the terms of the license
// agreement, you are not authorized to use this source code.
// For the terms of the license, please see the license agreement
// signed by you and Microsoft.
// THE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
import "unknwn.idl";
import "oaidl.idl";
import "ocidl.idl";
#include "wmpocxids.h"


// This file contains definitions for all enums, and interfaces that derive
// from either IUnknown or IDispatch.  Note that both public and private
// definitions are present in this IDL.
//
// This file would better be called "wmpocx_aux.idl".  It exists for no other
// reason than to split wmpocx.idl into two files (see note below).

// Note: Two idl files are used instead of one due to the apparently strange
// way in which the MIDL compiler operates.  A dummy type library must be
// included in this secondary idl file in order to keep extraneous interface
// and enum definitions out of the main type library.  However, none of that
// extraneous stuff appears in the dummy type library if it's present, either.


//
// Public enum types
//

typedef
[
    public
]
enum WMPOpenState // wmpos
{
    [] wmposUndefined,
    [] wmposPlaylistChanging,
    [] wmposPlaylistLocating,
    [] wmposPlaylistConnecting,
    [] wmposPlaylistLoading,
    [] wmposPlaylistOpening,
    [] wmposPlaylistOpenNoMedia,
    [] wmposPlaylistChanged,
    [] wmposMediaChanging,
    [] wmposMediaLocating,
    [] wmposMediaConnecting,
    [] wmposMediaLoading,
    [] wmposMediaOpening,
    [] wmposMediaOpen,
    [] wmposBeginCodecAcquisition,
    [] wmposEndCodecAcquisition,
    [] wmposBeginLicenseAcquisition,
    [] wmposEndLicenseAcquisition,
    [] wmposBeginIndividualization,
    [] wmposEndIndividualization,
    [] wmposMediaWaiting,    
    [] wmposOpeningUnknownURL,    
} WMPOpenState;

typedef
[
    public
]
enum WMPPlayState
{
    [] wmppsUndefined,
    [] wmppsStopped,
    [] wmppsPaused,
    [] wmppsPlaying,
    [] wmppsScanForward,
    [] wmppsScanReverse,
    [] wmppsBuffering,
    [] wmppsWaiting,
    [] wmppsMediaEnded,
    [] wmppsTransitioning,
    [] wmppsReady,
    [] wmppsReconnecting,
    [] wmppsLast,
} WMPPlayState;

// This enum isn't used, so help strings have been removed.
typedef
[
    public
]
enum WMPPlaylistChangeEventType
{
    [] wmplcUnknown = 0,
    [] wmplcClear,
    [] wmplcInfoChange,
    [] wmplcMove,
    [] wmplcDelete,
    [] wmplcInsert,
    [] wmplcAppend,
    [] wmplcPrivate,
    [] wmplcNameChange,
    [] wmplcMorph,
    [] wmplcSort,
    [] wmplcLast
} WMPPlaylistChangeEventType;


//
// Forward interface declarations
//

interface IWMPPlaylist;
interface IWMPControls;
interface IWMPSettings;
interface IWMPNetwork;
interface IWMPMedia;
interface IWMPMedia2;
interface IWMPPlaylist;
interface IWMPError;
interface IWMPErrorItem;
interface IWMPErrorItem2;


//
// "Forward" interface definitions
//

// These interfaces are not supported by this version of the OCX.  They must be
// defined, however and so skeleton definitions with the proper GUIDs are
// offered here.

[
    object,
    uuid(8363BC22-B4B4-4b19-989D-1CD765749DD1),
    dual,
    pointer_default(unique)
]
interface IWMPMediaCollection : IDispatch
{
}

[
    object,
    uuid(10A13217-23A7-439b-B1C0-D847C79B7774),
    dual,
    pointer_default(unique)
]
interface IWMPPlaylistCollection : IDispatch
{
}

[
    object,
    uuid(EE4C8FE2-34B2-11d3-A3BF-006097C9B344),
    dual,
    pointer_default(unique)
]
interface IWMPCdromCollection : IDispatch
{
}

[
    object,
    uuid(4F2DF574-C588-11d3-9ED0-00C04FB6E937),
    dual,
    pointer_default(unique)
]
interface IWMPClosedCaption : IDispatch
{
}

[
    object,
    uuid(8DA61686-4668-4a5c-AE5D-803193293DBE),
    dual,
    pointer_default(unique)
]
interface IWMPDVD : IDispatch
{
}

[
    object,
    uuid(40897764-CEAB-47be-AD4A-8E28537F9BBF),
    dual,
    pointer_default(unique)
]
interface IWMPPlayerApplication : IDispatch
{
}



//
//
// Public Interfaces
//
//


//
// IWMPCore Interface
//

[
    object,
    uuid(D84CCA99-CCE2-11d2-9ECC-0000F8085981),
    dual,
    pointer_default(unique)
]
interface IWMPCore : IDispatch
{
    // methods

    [ id(DISPID_WMPCORE_CLOSE) ]
        HRESULT close();

    // properties

    [ id( DISPID_WMPCORE_URL ), propget ]
        HRESULT URL( [out, retval] BSTR *pbstrURL );
    [ id( DISPID_WMPCORE_URL ), propput ]
        HRESULT URL( [in] BSTR bstrURL );
    [ id( DISPID_WMPCORE_OPENSTATE ), propget ]
        HRESULT openState( [out, retval] WMPOpenState *pwmpos );
    [ id( DISPID_WMPCORE_PLAYSTATE ), propget ]
        HRESULT playState( [out, retval] WMPPlayState *pwmpps );
    [ id(DISPID_WMPCORE_CONTROLS), propget ]
        HRESULT controls([out, retval] IWMPControls **ppControl);
    [ id(DISPID_WMPCORE_SETTINGS), propget ]
        HRESULT settings([out, retval] IWMPSettings **ppSettings);
    [ id(DISPID_WMPCORE_CURRENTMEDIA), propget ]
        HRESULT currentMedia([out, retval] IWMPMedia **ppMedia);
    [ id(DISPID_WMPCORE_CURRENTMEDIA), propput ]
        HRESULT currentMedia([in] IWMPMedia *pMedia);
    [ id(DISPID_WMPCORE_MEDIACOLLECTION), propget ]
        HRESULT mediaCollection([out, retval] IWMPMediaCollection **ppMediaCollection);
    [ id(DISPID_WMPCORE_PLAYLISTCOLLECTION), propget ]
        HRESULT playlistCollection([out, retval] IWMPPlaylistCollection **ppPlaylistCollection);
    [ id( DISPID_WMPCORE_VERSIONINFO ), propget ]
        HRESULT versionInfo( [out, retval] BSTR * pbstrVersionInfo );

    [id ( DISPID_WMPCORE_LAUNCHURL)]
        HRESULT launchURL(BSTR bstrURL);

    [propget, id(DISPID_WMPCORE_NETWORK) ]
        HRESULT network([out, retval] IWMPNetwork **ppQNI);
    [ id( DISPID_WMPCORE_CURRENTPLAYLIST), propget ]
        HRESULT currentPlaylist( [out, retval] IWMPPlaylist **ppPL );
    [ id( DISPID_WMPCORE_CURRENTPLAYLIST), propput ]
        HRESULT currentPlaylist( [in] IWMPPlaylist *pPL );
    [ id( DISPID_WMPCORE_CDROMCOLLECTION ), propget ]
        HRESULT cdromCollection ([out, retval] IWMPCdromCollection** ppCdromCollection);
    [ id(DISPID_WMPCORE_CLOSEDCAPTION), propget ]
        HRESULT closedCaption([out, retval] IWMPClosedCaption **ppClosedCaption);
    [ id(DISPID_WMPCORE_ISONLINE), propget ]
        HRESULT isOnline( [out, retval] VARIANT_BOOL *pfOnline );
    [ id(DISPID_WMPCORE_ERROR), propget ]
        HRESULT error([out, retval] IWMPError **ppError);
    [ id(DISPID_WMPCORE_STATUS), propget ]
        HRESULT status([out, retval] BSTR *pbstrStatus);
}


//
// IWMPCore2 Interface
//

[
    object,
    uuid(BC17E5B7-7561-4c18-BB90-17D485775659),
    dual,
    pointer_default(unique)
]
interface IWMPCore2 : IWMPCore
{
    // properties

    [ id( DISPID_WMPCORE2_DVD ), propget ]
        HRESULT dvd( [out, retval] IWMPDVD **ppDVD );
}


//
// IWMPCore3 Interface
//

[
    object,
    uuid(7587C667-628F-499f-88E7-6A6F4E888464),
    dual,
    pointer_default(unique)
]
interface IWMPCore3 : IWMPCore2
{
    // methods

    [ id(DISPID_WMPCORE3_NEWMEDIA) ]
        HRESULT newMedia([in] BSTR bstrURL, [out, retval] IWMPMedia **ppMedia);
    [ id(DISPID_WMPCORE3_NEWPLAYLIST) ]
        HRESULT newPlaylist([in] BSTR bstrName, [in] BSTR bstrURL, [out, retval] IWMPPlaylist **ppPlaylist);
}


//
// IWMPControls
//

[
    object,
    uuid(74C09E02-F828-11d2-A74B-00A0C905F36E),
    dual,
    pointer_default(unique)
]
interface IWMPControls : IDispatch
{
    [ id( DISPID_WMPCONTROLS_ISAVAILABLE ), propget ]
        HRESULT isAvailable( [in] BSTR bstrItem, [out, retval] VARIANT_BOOL *pIsAvailable );
    [ id( DISPID_WMPCONTROLS_PLAY ) ]
        HRESULT play();
    [ id( DISPID_WMPCONTROLS_STOP ) ]
        HRESULT stop();
    [ id( DISPID_WMPCONTROLS_PAUSE ) ]
        HRESULT pause();
    [ id( DISPID_WMPCONTROLS_FASTFORWARD ) ]
        HRESULT fastForward();
    [ id( DISPID_WMPCONTROLS_FASTREVERSE ) ]
        HRESULT fastReverse();
    [ id( DISPID_WMPCONTROLS_CURRENTPOSITION ), propget ]
        HRESULT currentPosition( [out, retval] double * pdCurrentPosition );
    [ id( DISPID_WMPCONTROLS_CURRENTPOSITION ), propput ]
        HRESULT currentPosition( [in] double dCurrentPosition );
    [ id( DISPID_WMPCONTROLS_CURRENTPOSITIONSTRING ), propget ]
        HRESULT currentPositionString( [out, retval] BSTR * pbstrCurrentPosition );
    [ id( DISPID_WMPCONTROLS_NEXT ) ]
        HRESULT next();
    [ id( DISPID_WMPCONTROLS_PREVIOUS ) ]
        HRESULT previous();
    [ id( DISPID_WMPCONTROLS_CURRENTITEM ), propget ]
        HRESULT currentItem( [out, retval] IWMPMedia **ppIWMPMedia);
    [ id( DISPID_WMPCONTROLS_CURRENTITEM ), propput ]
        HRESULT currentItem( [in] IWMPMedia *pIWMPMedia );
    [ id( DISPID_WMPCONTROLS_CURRENTMARKER ), propget ]
        HRESULT currentMarker( [out, retval] long *plMarker);
    [ id( DISPID_WMPCONTROLS_CURRENTMARKER ), propput ]
        HRESULT currentMarker( [in] long lMarker);
    [ id( DISPID_WMPCONTROLS_PLAYITEM ) ]
        HRESULT playItem( [in] IWMPMedia *pIWMPMedia );
}


//
// IWMPControls2
//

[
    object,
    uuid(6F030D25-0890-480f-9775-1F7E40AB5B8E),
    dual,
    pointer_default(unique)
]
interface IWMPControls2 : IWMPControls
{
    [ id( DISPID_WMPCONTROLS2_STEP ) ]
        HRESULT step([in] long lStep );
}


//
// IWMPControls3
//

[
    object,
    uuid(A1D1110E-D545-476a-9A78-AC3E4CB1E6BD),
    dual,
    pointer_default(unique)
]
interface IWMPControls3 : IWMPControls2
{
    [ id(DISPID_WMPCONTROLS3_AUDIOLANGUAGECOUNT), propget ]
        HRESULT audioLanguageCount( [out, retval] long *plCount );
    [ id(DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEID) ]
        HRESULT getAudioLanguageID( [in] long lIndex, [out, retval] long *plLangID );
    [ id(DISPID_WMPCONTROLS3_GETAUDIOLANGUAGEDESC) ]
        HRESULT getAudioLanguageDescription( [in] long lIndex, [out, retval] BSTR *pbstrLangDesc );
    [ id(DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE), propget ]
        HRESULT currentAudioLanguage( [out, retval] long *plLangID );
    [ id(DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGE), propput ]
        HRESULT currentAudioLanguage( [in] long lLangID );
    [ id(DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX), propget ]
        HRESULT currentAudioLanguageIndex( [out, retval] long *plIndex );
    [ id(DISPID_WMPCONTROLS3_CURRENTAUDIOLANGUAGEINDEX), propput ]
        HRESULT currentAudioLanguageIndex( [in] long lIndex );
    [ id(DISPID_WMPCONTROLS3_GETLANGUAGENAME) ]
        HRESULT getLanguageName( [in] long lLangID, [out, retval] BSTR *pbstrLangName );
    [ id(DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE), propget ]
        HRESULT currentPositionTimecode( [out, retval] BSTR * bstrTimecode );
    [ id(DISPID_WMPCONTROLS3_CURRENTPOSITIONTIMECODE), propput ]
        HRESULT currentPositionTimecode( [in] BSTR bstrTimecode );
}


//
// IWMPSettings
//

[
    object,
    uuid(9104D1AB-80C9-4fed-ABF0-2E6417A6DF14),
    dual,
    pointer_default(unique)
]
interface IWMPSettings : IDispatch
{
    [ id( DISPID_WMPSETTINGS_ISAVAILABLE ), propget ]
        HRESULT isAvailable( [in] BSTR bstrItem, [out, retval] VARIANT_BOOL *pIsAvailable );
    [ id( DISPID_WMPSETTINGS_AUTOSTART ), propget ]
        HRESULT autoStart( [out, retval] VARIANT_BOOL *pfAutoStart );
    [ id( DISPID_WMPSETTINGS_AUTOSTART ), propput ]
        HRESULT autoStart( [in] VARIANT_BOOL fAutoStart );

    [ id( DISPID_WMPSETTINGS_BASEURL ), propget ]
        HRESULT baseURL( [out, retval] BSTR * pbstrBaseURL );
    [ id( DISPID_WMPSETTINGS_BASEURL ), propput ]
        HRESULT baseURL( [in] BSTR bstrBaseURL );

    [ id( DISPID_WMPSETTINGS_DEFAULTFRAME ), propget ]
        HRESULT defaultFrame( [out, retval] BSTR * pbstrDefaultFrame );
    [ id( DISPID_WMPSETTINGS_DEFAULTFRAME ), propput ]
        HRESULT defaultFrame( [in] BSTR bstrDefaultFrame );

    [ id( DISPID_WMPSETTINGS_INVOKEURLS ), propget ]
        HRESULT invokeURLs( [out, retval] VARIANT_BOOL *pfInvokeURLs );
    [ id( DISPID_WMPSETTINGS_INVOKEURLS ), propput ]
        HRESULT invokeURLs( [in] VARIANT_BOOL fInvokeURLs );

    [ id( DISPID_WMPSETTINGS_MUTE ), propget ]
        HRESULT mute( [out, retval] VARIANT_BOOL *pfMute );
    [ id( DISPID_WMPSETTINGS_MUTE ), propput ]
        HRESULT mute( [in] VARIANT_BOOL fMute );

    [ id( DISPID_WMPSETTINGS_PLAYCOUNT ), propget ]
        HRESULT playCount( [out, retval] long *plCount );
    [ id( DISPID_WMPSETTINGS_PLAYCOUNT ), propput ]
        HRESULT playCount( [in] long lCount );

    [ id( DISPID_WMPSETTINGS_RATE ), propget ]
        HRESULT rate( [out, retval] double * pdRate );
    [ id( DISPID_WMPSETTINGS_RATE ), propput ]
        HRESULT rate( [in] double dRate );

    [ id( DISPID_WMPSETTINGS_BALANCE ), propget ]
        HRESULT balance( [out, retval] long * plBalance );
    [ id( DISPID_WMPSETTINGS_BALANCE ), propput ]
        HRESULT balance( [in] long lBalance );

    [ id( DISPID_WMPSETTINGS_VOLUME ), propget ]
        HRESULT volume( [out, retval] long * plVolume );
    [ id( DISPID_WMPSETTINGS_VOLUME ), propput ]
        HRESULT volume( [in] long lVolume );

    [ id( DISPID_WMPSETTINGS_GETMODE ) ]
        HRESULT getMode(  [in] BSTR bstrMode, [out,retval] VARIANT_BOOL *pvarfMode );
    [ id( DISPID_WMPSETTINGS_SETMODE ) ]
        HRESULT setMode( [in] BSTR bstrMode, [in] VARIANT_BOOL varfMode );

    [ id( DISPID_WMPSETTINGS_ENABLEERRORDIALOGS ), propget ]
        HRESULT enableErrorDialogs( [out, retval] VARIANT_BOOL *pfEnableErrorDialogs );
    [ id( DISPID_WMPSETTINGS_ENABLEERRORDIALOGS ), propput ]
        HRESULT enableErrorDialogs( [in] VARIANT_BOOL fEnableErrorDialogs );

}


//
// IWMPNetwork
//

[
    object,
    uuid(EC21B779-EDEF-462d-BBA4-AD9DDE2B29A7),
    dual,
    pointer_default(unique)
]
interface IWMPNetwork : IDispatch
{
    [ id( DISPID_WMPNETWORK_BANDWIDTH ), propget ]
        HRESULT bandWidth( [out, retval] long *plBandwidth );
    [ id( DISPID_WMPNETWORK_RECOVEREDPACKETS ), propget ]
        HRESULT recoveredPackets( [out, retval] long *plRecoveredPackets );
    [ id( DISPID_WMPNETWORK_SOURCEPROTOCOL ), propget ]
        HRESULT sourceProtocol( [out, retval] BSTR *pbstrSourceProtocol );
    [ id( DISPID_WMPNETWORK_RECEIVEDPACKETS ), propget ]
        HRESULT receivedPackets( [out, retval] long *plReceivedPackets );
    [ id( DISPID_WMPNETWORK_LOSTPACKETS ), propget ]
        HRESULT lostPackets( [out, retval] long *plLostPackets );
    [ id( DISPID_WMPNETWORK_RECEPTIONQUALITY ), propget ]
        HRESULT receptionQuality( [out, retval] long *plReceptionQuality );
    [ id( DISPID_WMPNETWORK_BUFFERINGCOUNT ), propget ]
        HRESULT bufferingCount( [out, retval] long *plBufferingCount );
    [ id( DISPID_WMPNETWORK_BUFFERINGPROGRESS ), propget ]
        HRESULT bufferingProgress( [out, retval] long *plBufferingProgress );
    [ id( DISPID_WMPNETWORK_BUFFERINGTIME ), propget ]
        HRESULT bufferingTime( [out, retval] long *plBufferingTime );
    [ id( DISPID_WMPNETWORK_BUFFERINGTIME ), propput ]
        HRESULT bufferingTime( [in] long lBufferingTime );
    [ id( DISPID_WMPNETWORK_FRAMERATE ), propget ]
        HRESULT frameRate( [out, retval] long *plFrameRate );
    [ id( DISPID_WMPNETWORK_MAXBITRATE ), propget ]
        HRESULT maxBitRate( [out, retval] long *plBitRate );
    [ id( DISPID_WMPNETWORK_BITRATE ), propget ]
        HRESULT bitRate( [out, retval] long *plBitRate );
    [ id( DISPID_WMPNETWORK_GETPROXYSETTINGS ) ]
        HRESULT getProxySettings( [in] BSTR bstrProtocol, [out, retval] long *plProxySetting );
    [  id( DISPID_WMPNETWORK_SETPROXYSETTINGS ) ]
        HRESULT setProxySettings( [in] BSTR bstrProtocol, [in] long lProxySetting );
    [ id( DISPID_WMPNETWORK_GETPROXYNAME ) ]
        HRESULT getProxyName( [in] BSTR bstrProtocol, [out, retval] BSTR *pbstrProxyName );
    [  id( DISPID_WMPNETWORK_SETPROXYNAME ) ]
        HRESULT setProxyName( [in] BSTR bstrProtocol, [in] BSTR bstrProxyName );
    [ id( DISPID_WMPNETWORK_GETPROXYPORT ) ]
        HRESULT getProxyPort( [in] BSTR bstrProtocol, [out, retval] long * lProxyPort );
    [  id( DISPID_WMPNETWORK_SETPROXYPORT ) ]
        HRESULT setProxyPort( [in] BSTR bstrProtocol, [in] long lProxyPort );
    [ id( DISPID_WMPNETWORK_GETPROXYEXCEPTIONLIST ) ]
        HRESULT getProxyExceptionList( [in] BSTR bstrProtocol, [out, retval] BSTR *pbstrExceptionList );
    [  id( DISPID_WMPNETWORK_SETPROXYEXCEPTIONLIST ) ]
        HRESULT setProxyExceptionList( [in] BSTR bstrProtocol, [in] BSTR pbstrExceptionList );
    [ id( DISPID_WMPNETWORK_GETPROXYBYPASSFORLOCAL ) ]
        HRESULT getProxyBypassForLocal( [in] BSTR bstrProtocol, [out, retval] VARIANT_BOOL *pfBypassForLocal );
    [  id( DISPID_WMPNETWORK_SETPROXYBYPASSFORLOCAL ) ]
        HRESULT setProxyBypassForLocal( [in] BSTR bstrProtocol, [in] VARIANT_BOOL fBypassForLocal );
    [ id( DISPID_WMPNETWORK_MAXBANDWIDTH ), propget ]
        HRESULT maxBandwidth( [out, retval] long * lMaxBandwidth );
    [ id( DISPID_WMPNETWORK_MAXBANDWIDTH ), propput ]
        HRESULT maxBandwidth( [in] long lMaxBandwidth );
    [ id( DISPID_WMPNETWORK_DOWNLOADPROGRESS ), propget ]
        HRESULT downloadProgress( [out, retval] long *plDownloadProgress );
    [ id( DISPID_WMPNETWORK_ENCODEDFRAMERATE ), propget ]
        HRESULT encodedFrameRate( [out, retval] long *plFrameRate );
    [ id( DISPID_WMPNETWORK_FRAMESSKIPPED ), propget ]
        HRESULT framesSkipped( [out, retval] long *plFrames );
}


//
// IWMPMedia Interface
//

[
    object,
    uuid(94D55E95-3FAC-11d3-B155-00C04F79FAA6),
    dual,
    pointer_default(unique)
]
interface IWMPMedia : IDispatch
{
    [ id( DISPID_WMPMEDIA_ISIDENTICAL ), propget ]
        HRESULT isIdentical([in] IWMPMedia *pIWMPMedia, [out, retval] VARIANT_BOOL *pvbool );
    [ id( DISPID_WMPMEDIA_SOURCEURL ), propget ]
        HRESULT sourceURL( [out, retval] BSTR *pbstrSourceURL );
    [ id( DISPID_WMPMEDIA_NAME ), propget ]
        HRESULT name( [out, retval] BSTR *pbstrName);
    [ id( DISPID_WMPMEDIA_NAME ), propput ]
        HRESULT name( [in] BSTR bstrName);
    [ id( DISPID_WMPMEDIA_IMAGESOURCEWIDTH ), propget ]
        HRESULT imageSourceWidth( [out, retval] long *pWidth );
    [ id( DISPID_WMPMEDIA_IMAGESOURCEHEIGHT ), propget ]
        HRESULT imageSourceHeight( [out, retval] long *pHeight );
    [ id( DISPID_WMPMEDIA_MARKERCOUNT ), propget ]
        HRESULT markerCount( [out, retval] long *pMarkerCount );
    [ id( DISPID_WMPMEDIA_GETMARKERTIME ) ]
        HRESULT getMarkerTime( [in] long MarkerNum, [out, retval] double *pMarkerTime );
    [ id( DISPID_WMPMEDIA_GETMARKERNAME ) ]
        HRESULT getMarkerName( [in] long MarkerNum, [out, retval] BSTR *pbstrMarkerName );
    [ id( DISPID_WMPMEDIA_DURATION ), propget ]
        HRESULT duration( [out, retval] double * pDuration );
    [ id( DISPID_WMPMEDIA_DURATIONSTRING ), propget ]
        HRESULT durationString( [out, retval] BSTR * pbstrDuration );
    [ id( DISPID_WMPMEDIA_ATTRIBUTECOUNT ), propget ]
        HRESULT attributeCount( [out, retval] long *plCount );
    [ id( DISPID_WMPMEDIA_GETATTRIBUTENAME ) ]
        HRESULT getAttributeName( [in] long lIndex, [out, retval] BSTR *pbstrItemName );
    [ id( DISPID_WMPMEDIA_GETITEMINFO ) ]
        HRESULT getItemInfo( [in] BSTR bstrItemName, [out, retval] BSTR *pbstrVal );
    [ id( DISPID_WMPMEDIA_SETITEMINFO ) ]
        HRESULT setItemInfo( [in] BSTR bstrItemName, [in] BSTR bstrVal );
    [ id( DISPID_WMPMEDIA_GETITEMINFOBYATOM ) ]
        HRESULT getItemInfoByAtom( [in] long lAtom, [out, retval] BSTR* pbstrVal );
    [ id( DISPID_WMPMEDIA_ISMEMBEROF ) ]
        HRESULT isMemberOf( [in] IWMPPlaylist* pPlaylist, [out, retval] VARIANT_BOOL* pvarfIsMemberOf );
    [ id( DISPID_WMPMEDIA_ISREADONLYITEM ) ]
        HRESULT isReadOnlyItem( [in] BSTR bstrItemName, [out, retval] VARIANT_BOOL* pvarfIsReadOnly);
}


//
// IWMPMedia2 Interface
//

[
    object,
    uuid(AB7C88BB-143E-4ea4-ACC3-E4350B2106C3),
    dual,
    pointer_default(unique)
]
interface IWMPMedia2 : IWMPMedia
{
    [ id( DISPID_WMPMEDIA2_GET_ERROR ), propget ]
        HRESULT error([out] IWMPErrorItem** pIWMPErrorItem );
}


//
// IWMPPlaylist Interface
//

[
    object,
    uuid(D5F0F4F1-130C-11d3-B14E-00C04F79FAA6),
    dual,
    pointer_default(unique)
]
interface IWMPPlaylist : IDispatch
{
    // properties
    [ id( DISPID_WMPPLAYLIST_COUNT ), propget ]
        HRESULT count( [out, retval] long *plCount );
    [ id( DISPID_WMPPLAYLIST_NAME ), propget ]
        HRESULT name( [out, retval] BSTR *pbstrName);
    [ id( DISPID_WMPPLAYLIST_NAME ), propput ]
        HRESULT name( [in] BSTR bstrName);
    [ id( DISPID_WMPPLAYLIST_ATTRIBUTECOUNT ), propget ]
        HRESULT attributeCount( [out, retval] long *plCount);
    [ id( DISPID_WMPPLAYLIST_ATTRIBUTENAME ), propget ]
        HRESULT attributeName( [in] long lIndex, [out, retval] BSTR *pbstrAttributeName);
    [ id( DISPID_WMPPLAYLIST_ITEM ), propget ]
        HRESULT item( long lIndex, [out, retval] IWMPMedia **ppIWMPMedia );
    [ id( DISPID_WMPPLAYLIST_GETITEMINFO ) ]
        HRESULT getItemInfo( BSTR bstrName, [out, retval] BSTR *pbstrVal );
    [ id( DISPID_WMPPLAYLIST_SETITEMINFO ) ]
        HRESULT setItemInfo( [in] BSTR bstrName, [in] BSTR bstrValue );

    // methods
    [ id( DISPID_WMPPLAYLIST_ISIDENTICAL ), propget ]
        HRESULT isIdentical([in] IWMPPlaylist *pIWMPPlaylist, [out, retval] VARIANT_BOOL *pvbool );
    [ id( DISPID_WMPPLAYLIST_CLEAR ) ]
        HRESULT clear();
    [ id( DISPID_WMPPLAYLIST_INSERTITEM ) ]
        HRESULT insertItem( [in] long lIndex, [in] IWMPMedia *pIWMPMedia );
    [ id( DISPID_WMPPLAYLIST_APPENDITEM ) ]
        HRESULT appendItem( [in] IWMPMedia *pIWMPMedia );
    [ id( DISPID_WMPPLAYLIST_REMOVEITEM ) ]
        HRESULT removeItem([in] IWMPMedia *pIWMPMedia );
    [ id( DISPID_WMPPLAYLIST_MOVEITEM ) ]
        HRESULT moveItem(long lIndexOld, long lIndexNew );
}


//
// Error Interfaces
//

[
    object,
    uuid(3614C646-3B3B-4de7-A81E-930E3F2127B3),
    dual,
    pointer_default(unique)
]
interface IWMPErrorItem : IDispatch
{
    [ id(DISPID_WMPERRORITEM_ERRORCODE), propget ]
        HRESULT errorCode( [out, retval] long * phr );
    [ id(DISPID_WMPERRORITEM_ERRORDESCRIPTION), propget ]
        HRESULT errorDescription( [out, retval] BSTR * pbstrDescription );
    [ id(DISPID_WMPERRORITEM_ERRORCONTEXT), propget ]
        HRESULT errorContext( [out, retval] VARIANT * pvarContext );
    [ id(DISPID_WMPERRORITEM_REMEDY), propget ]
        HRESULT remedy( [out, retval] long * plRemedy );
    [ id(DISPID_WMPERRORITEM_CUSTOMURL), propget ]
        HRESULT customUrl( [out, retval] BSTR * pbstrCustomUrl );
}

[
    object,
    uuid(F75CCEC0-C67C-475c-931E-8719870BEE7D),
    dual,
    pointer_default(unique)
]
interface IWMPErrorItem2 : IWMPErrorItem
{
    // properties
    [ id(DISPID_WMPERRORITEM2_CONDITION), propget ]
        HRESULT condition( [out, retval] long * plCondition );
}


[
    object,
    uuid(A12DCF7D-14AB-4c1b-A8CD-63909F06025B),
    dual,
    pointer_default(unique)
]
interface IWMPError : IDispatch
{
    [ id(DISPID_WMPERROR_CLEARERRORQUEUE) ]
        HRESULT clearErrorQueue();
    [ id(DISPID_WMPERROR_ERRORCOUNT), propget ]
        HRESULT errorCount( [out, retval] long * pdwNumErrors );
    [ id(DISPID_WMPERROR_ITEM), propget ]
        HRESULT item( [in] long dwIndex, [out, retval] IWMPErrorItem ** ppErrorItem );
    [ id(DISPID_WMPERROR_WEBHELP) ]
        HRESULT webHelp();
}




// Note: In order for the the main type library, wmpocx.tlb, to not include
// extraneous COM stuff that isn't required for scripting support, this extra
// type library must be included in another idl file other than wmpocx.idl.
[
    uuid(60ED65E7-1B7F-11d3-B14E-00C04F79FAA6),
    version(1.0)
]
library DummyLib
{
    importlib("stdole32.tlb");
    importlib("stdole2.tlb");

    [
        uuid(09428D37-E0B9-11d2-B147-00C04F79FAA6)
    ]
    coclass DummyCoClass
    {
        [default] interface IWMPCore;
    };
};
