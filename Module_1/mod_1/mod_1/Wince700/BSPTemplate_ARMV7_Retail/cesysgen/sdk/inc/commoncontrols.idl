//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// CommonControls.idl
//
cpp_quote("#if (_WIN32_IE >= 0x0501)")

import "oaidl.idl";
import "ocidl.idl";

cpp_quote("#ifndef WINCOMMCTRLAPI")
cpp_quote("#if !defined(_COMCTL32_) && defined(_WIN32)")
cpp_quote("#define WINCOMMCTRLAPI DECLSPEC_IMPORT")
cpp_quote("#else")
cpp_quote("#define WINCOMMCTRLAPI")
cpp_quote("#endif")
cpp_quote("#endif // WINCOMMCTRLAPI")

cpp_quote("#ifdef MIDL_PASS")
typedef DWORD RGBQUAD;

typedef IUnknown* HIMAGELIST;
cpp_quote("typedef struct _IMAGELIST* HIMAGELIST;")

typedef struct _IMAGELISTDRAWPARAMS
{
    DWORD       cbSize;
    HIMAGELIST  himl;
    int         i;
    HDC         hdcDst;
    int         x;
    int         y;
    int         cx;
    int         cy;
    int         xBitmap;        // x offest from the upperleft of bitmap
    int         yBitmap;        // y offset from the upperleft of bitmap
    COLORREF    rgbBk;
    COLORREF    rgbFg;
    UINT        fStyle;
    DWORD       dwRop;
    DWORD       fState;
    DWORD       Frame;
    COLORREF    crEffect;
} IMAGELISTDRAWPARAMS;

typedef IMAGELISTDRAWPARAMS* LPIMAGELISTDRAWPARAMS;
typedef struct tagIMAGEINFO
{
    HBITMAP hbmImage;
    HBITMAP hbmMask;
    int     Unused1;
    int     Unused2;
    RECT    rcImage;
} IMAGEINFO;

typedef IMAGEINFO* LPIMAGEINFO;
cpp_quote("#endif") // MIDL_PASS

cpp_quote("#if _WIN32_WINNT >= 0x0600")

cpp_quote("WINCOMMCTRLAPI HRESULT WINAPI ImageList_CoCreateInstance(")
cpp_quote("         __in  REFCLSID rclsid,")
cpp_quote("         __in  const IUnknown *punkOuter,")
cpp_quote("         __in  REFIID riid,")
cpp_quote("         __out void **ppv);")
cpp_quote("#endif")

// flags returned by GetItemFlags
cpp_quote("#define ILIF_ALPHA               0x00000001") // item has alpha
cpp_quote("#define ILIF_LOWQUALITY          0x00000002") // image is low quality (was generated by a StretchBlt)

// return values (if SUCCEEDED()) for IImageList::Draw
cpp_quote("#define ILDRF_IMAGELOWQUALITY    0x00000001") // image is low quality
cpp_quote("#define ILDRF_OVERLAYLOWQUALITY  0x00000010") // overlay is low quality

[
    uuid(46EB5926-582E-4017-9FDF-E8998DAA0950),
    local
]
interface IImageList : IUnknown
{
    HRESULT Add(HBITMAP hbmImage, HBITMAP hbmMask, int* pi);
    HRESULT ReplaceIcon(int i, HICON hicon, int* pi);
    HRESULT SetOverlayImage(int iImage, int iOverlay);
    HRESULT Replace(int i, HBITMAP hbmImage, HBITMAP hbmMask);
    HRESULT AddMasked(HBITMAP hbmImage, COLORREF crMask, int* pi);
    HRESULT Draw(IMAGELISTDRAWPARAMS* pimldp);
    HRESULT Remove(int i);
    HRESULT GetIcon(int i, UINT flags, HICON* picon);
    HRESULT GetImageInfo(int i, IMAGEINFO* pImageInfo);
    HRESULT Copy(int iDst, IUnknown* punkSrc, int iSrc, UINT uFlags);
    HRESULT Merge(int i1, IUnknown* punk2, int i2, int dx, int dy, REFIID riid, void** ppv);
    HRESULT Clone(REFIID riid, void** ppv);
    HRESULT GetImageRect(int i,  RECT* prc);
    HRESULT GetIconSize(int* cx, int* cy);
    HRESULT SetIconSize(int cx, int cy);
    HRESULT GetImageCount(int* pi);
    HRESULT SetImageCount(UINT uNewCount);
    HRESULT SetBkColor(COLORREF clrBk, COLORREF* pclr);
    HRESULT GetBkColor(COLORREF* pclr);
    HRESULT BeginDrag(int iTrack, int dxHotspot, int dyHotspot);
    HRESULT EndDrag();
    HRESULT DragEnter(HWND hwndLock, int x, int y);
    HRESULT DragLeave(HWND hwndLock);
    HRESULT DragMove(int x, int y);
    HRESULT SetDragCursorImage(IUnknown* punk, int iDrag, int dxHotspot, int dyHotspot);
    HRESULT DragShowNolock(BOOL fShow);
    HRESULT GetDragImage(POINT * ppt, POINT * pptHotspot, REFIID riid, void** ppv);
    HRESULT GetItemFlags(int i, DWORD *dwFlags);
    HRESULT GetOverlayImage(int iOverlay, int* piIndex);
};


cpp_quote("#define ILR_DEFAULT                  0x0000")   

cpp_quote("#define ILR_HORIZONTAL_LEFT          0x0000")
cpp_quote("#define ILR_HORIZONTAL_CENTER        0x0001")
cpp_quote("#define ILR_HORIZONTAL_RIGHT         0x0002")

cpp_quote("#define ILR_VERTICAL_TOP             0x0000")
cpp_quote("#define ILR_VERTICAL_CENTER          0x0010")
cpp_quote("#define ILR_VERTICAL_BOTTOM          0x0020")

cpp_quote("#define ILR_SCALE_CLIP               0x0000")
cpp_quote("#define ILR_SCALE_ASPECTRATIO        0x0100")


// New for (_WIN32_IE >= 0x0605)
[
    uuid(192b9d83-50fc-457b-90a0-2b82a8b5dae1),
    local
]
interface IImageList2 : IImageList
{

//  Flags for GetOriginalSize
cpp_quote("#define ILGOS_ALWAYS         0x00000000") // always get the original size (can be slow)
cpp_quote("#define ILGOS_FROMSTANDBY    0x00000001") // only if present or on standby

//  Flags for ForceImagePresent
cpp_quote("#define ILFIP_ALWAYS         0x00000000") // always get the image (can be slow)
cpp_quote("#define ILFIP_FROMSTANDBY    0x00000001") // only if on standby

//  Flags for DiscardImages
//
//  ILDI_STANDBY and ILDI_PURGE are mutually exclusive.
//  ILDI_RESETACCESS can be combined with either.

cpp_quote("#define ILDI_PURGE       0x00000001") // discard and purge
cpp_quote("#define ILDI_STANDBY     0x00000002") // discard to standby list

cpp_quote("#define ILDI_RESETACCESS 0x00000004") // reset "has been accessed" flag
cpp_quote("#define ILDI_QUERYACCESS 0x00000008") // ask whether access flag is set (but do not reset)

    typedef struct tagIMAGELISTSTATS
    {
        DWORD       cbSize;
        int         cAlloc;     // number of images allocated
        int         cUsed;      // number of images in use
        int         cStandby;   // number of standby images
    } IMAGELISTSTATS;

    HRESULT Resize(int cxNewIconSize, int cyNewIconSize);
    HRESULT GetOriginalSize([in] int iImage, [in] DWORD dwFlags, int *pcx, int *pcy);
    HRESULT SetOriginalSize([in] int iImage, [in] int cx, [in] int cy);
    HRESULT SetCallback(IUnknown *punk);
    HRESULT GetCallback([in] REFIID riid, [out] void** ppv);
    HRESULT ForceImagePresent([in] int iImage, DWORD dwFlags);
    HRESULT DiscardImages([in] int iFirstImage, [in] int iLastImage, [in] DWORD dwFlags);
    HRESULT PreloadImages([in] IMAGELISTDRAWPARAMS* pimldp);
    HRESULT GetStatistics([in, out] IMAGELISTSTATS *pils);
    HRESULT Initialize([in] int cx, [in] int cy, [in] UINT flags, [in] int cInitial, [in] int cGrow);
    HRESULT Replace2(int i, [in] HBITMAP hbmImage, [in] HBITMAP hbmMask, [in] IUnknown *punk, DWORD dwFlags);
    HRESULT ReplaceFromImageList(int i, [in] IImageList *pil, int iSrc, [in] IUnknown *punk, DWORD dwFlags);
};

[
    uuid(BCADA15B-B428-420c-8D28-023590924C9F)
]
library CommonControlObjects
{

    [
        uuid(7C476BA2-02B1-48f4-8048-B24619DDC058)  // CLSID_ImageList
    ]
    coclass ImageList
    {
        interface IImageList;
        interface IImageList2;
    }
};

cpp_quote("#endif // if (_WIN32_IE >= 0x0501)")
