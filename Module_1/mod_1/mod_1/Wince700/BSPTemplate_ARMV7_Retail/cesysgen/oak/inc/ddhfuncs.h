//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
// -----------------------------------------------------------------------------
//
//  THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
//  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
//  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
//  PARTICULAR PURPOSE.
//  
// -----------------------------------------------------------------------------

#pragma once

// HALInit
EXTERN_C BOOL WINAPI HALInit(LPDDHALINFO lpddhi, BOOL Unused1, DWORD Unused2);
EXTERN_C void buildDDHALInfo(LPDDHALINFO lpddhi, DWORD Unused2);

// DDraw HAL functions

//DDHAL_DDCALLBACKS
DWORD WINAPI HalCreateSurface( LPDDHAL_CREATESURFACEDATA );
DWORD WINAPI HalWaitForVerticalBlank( LPDDHAL_WAITFORVERTICALBLANKDATA );
DWORD WINAPI HalCanCreateSurface( LPDDHAL_CANCREATESURFACEDATA );
DWORD WINAPI HalCreatePalette( LPDDHAL_CREATEPALETTEDATA );
DWORD WINAPI HalGetScanLine( LPDDHAL_GETSCANLINEDATA );

// DDHAL_DDPALETTECALLBACKS
DWORD WINAPI HalDestroyPalette( LPDDHAL_DESTROYPALETTEDATA );
DWORD WINAPI HalSetEntries( LPDDHAL_SETENTRIESDATA );

// DDHAL_DDSURFACECALLBACKS
DWORD WINAPI HalDestroySurface( LPDDHAL_DESTROYSURFACEDATA );
DWORD WINAPI HalFlip( LPDDHAL_FLIPDATA );
DWORD WINAPI HalLock( LPDDHAL_LOCKDATA );
DWORD WINAPI HalUnlock( LPDDHAL_UNLOCKDATA );
DWORD WINAPI HalSetColorKey( LPDDHAL_SETCOLORKEYDATA );
DWORD WINAPI HalGetBltStatus( LPDDHAL_GETBLTSTATUSDATA );
DWORD WINAPI HalGetFlipStatus( LPDDHAL_GETFLIPSTATUSDATA );
DWORD WINAPI HalUpdateOverlay( LPDDHAL_UPDATEOVERLAYDATA );
DWORD WINAPI HalSetOverlayPosition( LPDDHAL_SETOVERLAYPOSITIONDATA );
DWORD WINAPI HalSetPalette( LPDDHAL_SETPALETTEDATA );

// LPDDHAL_GETDRIVERINFO
DWORD WINAPI HalGetDriverInfo(LPDDHAL_GETDRIVERINFODATA lpInput);

/* !TODO!

// DDHAL_DDCOLORCONTROLCALLBACKS
DWORD WINAPI HalColorControl ( LPDDHAL_COLORCONTROLDATA );

// DDHAL_DDMISCELLANEOUSCALLBACKS
DWORD WINAPI HalGetAvailDriverMemory(LPDDHAL_GETAVAILDRIVERMEMORYDATA);
DWORD WINAPI HalUpdateNonLocalHeap(LPDDHAL_UPDATENONLOCALHEAPDATA);
DWORD WINAPI HalGetHeapAlignment(LPDDHAL_GETHEAPALIGNMENTDATA);
DWORD WINAPI HalGetSysmemBltStatus(LPDDHAL_GETBLTSTATUSDATA);

// DDHAL_DDHALMEMORYCALLBACKS
DWORD WINAPI HalGetVidMem(LPDDHAL_HALGETVIDMEMDATA pd);
DWORD WINAPI HalSetSurfaceDesc(LPDDHAL_HALSETSURFACEDESCDATA pd);

*/

// DDHAL_DDVIDEOPORTCALLBACKS
DWORD WINAPI HalCanCreateVideoPort(LPDDHAL_CANCREATEVPORTDATA);
DWORD WINAPI HalCreateVideoPort(LPDDHAL_CREATEVPORTDATA);
DWORD WINAPI HalFlipVideoPort(LPDDHAL_FLIPVPORTDATA);
DWORD WINAPI HalGetVideoPortBandwidth(LPDDHAL_GETVPORTBANDWIDTHDATA);
DWORD WINAPI HalGetVideoPortInputFormats(LPDDHAL_GETVPORTINPUTFORMATDATA);
DWORD WINAPI HalGetVideoPortOutputFormats(LPDDHAL_GETVPORTOUTPUTFORMATDATA);
DWORD WINAPI HalGetVideoPortField(LPDDHAL_GETVPORTFIELDDATA);
DWORD WINAPI HalGetVideoPortLine(LPDDHAL_GETVPORTLINEDATA);
DWORD WINAPI HalGetVideoPortConnectInfo(LPDDHAL_GETVPORTCONNECTDATA);
DWORD WINAPI HalDestroyVideoPort(LPDDHAL_DESTROYVPORTDATA);
DWORD WINAPI HalGetVideoPortFlipStatus(LPDDHAL_GETVPORTFLIPSTATUSDATA);
DWORD WINAPI HalUpdateVideoPort(LPDDHAL_UPDATEVPORTDATA);
DWORD WINAPI HalWaitForVideoPortSync(LPDDHAL_WAITFORVPORTSYNCDATA);
DWORD WINAPI HalGetVideoSignalStatus(LPDDHAL_GETVPORTSIGNALDATA);
DWORD WINAPI HalColorControl(LPDDHAL_VPORTCOLORDATA);

// callback structures

extern DDHAL_DDCALLBACKS cbDDCallbacks;
extern DDHAL_DDPALETTECALLBACKS cbDDPaletteCallbacks;
extern DDHAL_DDSURFACECALLBACKS cbDDSurfaceCallbacks;

extern DDHAL_DDVIDEOPORTCALLBACKS VideoPortCallbacks;
extern const DDVIDEOPORTCAPS VideoPortCaps;

/* !TODO!

extern DDHAL_DDCOLORCONTROLCALLBACKS ColorControlCallbacks;
extern DDHAL_DDMISCELLANEOUSCALLBACKS MiscellaneousCallbacks;
extern DDHAL_DDHALMEMORYCALLBACKS HalMemoryCallbacks;

#ifdef D_MISCELLANEOUSCECALLBACKS
extern DDHAL_DDMISCELLANEOUSCECALLBACKS MiscellaneousCECallbacks;
#endif //D_MISCELLANEOUSCECALLBACKS
#if DIRECTDRAW_VERSION >= 0x0700
extern const DDMORECAPS MoreCaps;
extern DDHAL_DDMISCELLANEOUS2CALLBACKS Miscellaneous2Callbacks;
#endif //DIRECTDRAW_VERSION >= 0x0700

*/

EXTERN_C DWORD WINAPI DDGPEWaitForVerticalBlank( LPDDHAL_WAITFORVERTICALBLANKDATA );
EXTERN_C DWORD WINAPI DDGPESetColorKey( LPDDHAL_SETCOLORKEYDATA pd );
EXTERN_C DWORD WINAPI DDGPECanCreateSurface( LPDDHAL_CANCREATESURFACEDATA );
EXTERN_C DWORD WINAPI DDGPECreateSurface( LPDDHAL_CREATESURFACEDATA pd );
EXTERN_C DWORD WINAPI DDGPELock( LPDDHAL_LOCKDATA pd );
EXTERN_C DWORD WINAPI DDGPEUnlock( LPDDHAL_UNLOCKDATA pd );
EXTERN_C DWORD WINAPI DDGPEDestroySurface( LPDDHAL_DESTROYSURFACEDATA pd );
EXTERN_C DWORD WINAPI DDGPEFlip( LPDDHAL_FLIPDATA pd );
EXTERN_C DWORD WINAPI DDGPEGetFlipStatus( LPDDHAL_GETFLIPSTATUSDATA pd );
EXTERN_C DWORD WINAPI DDGPESetPalette( LPDDHAL_SETPALETTEDATA pd );
EXTERN_C DWORD WINAPI DDGPECreatePalette( LPDDHAL_CREATEPALETTEDATA pd );
EXTERN_C DWORD WINAPI DDGPEDestroyPalette( LPDDHAL_DESTROYPALETTEDATA pd );
EXTERN_C DWORD WINAPI DDGPESetEntries( LPDDHAL_SETENTRIESDATA pd );
