//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//
/*++
THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF
ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A
PARTICULAR PURPOSE.

Module Name:

rildrv.h

Abstract:


Notes:


--*/

#ifndef _RILDRV_H_
#define _RILDRV_H_

#include <windows.h>
#include <ril.h>

#ifdef UNDER_CE
#include <windev.h>
#else  // UNDER_CE
#define CTL_CODE(DeviceType, Function, Method, Access) \
                (((DeviceType) << 16) | ((Access) << 14) | ((Function) << 2) | (Method))

#define METHOD_BUFFERED                             0x00
#define FILE_ANY_ACCESS                             0x00
#endif // UNDER_CE

#ifdef __cplusplus
extern "C" {
#endif

//
// Constants
//

// RIL Driver runs at priority of RIL_DRIVER_PRIORITY.
// Set RIL_DRIVER_PRIORITY of 246 to match higher layer modules.
#define RIL_DRIVER_PRIORITY                         246

// Name of global event indicating driver presence
#define RILDRIVERPRESENT_EVENT                      TEXT("RILDrv_Present")

// Name of global event indicating data mode status: signalled means in data mode
#define RILDRIVERDATAMODE_EVENT                      TEXT("RILDrv_DataMode")

// RIL IO-control codes
#define FILE_DEVICE_RIL                             0x300

// In:  none
// Out: none
#define IOCTL_RIL_REGISTERWITHCPM                   CTL_CODE(FILE_DEVICE_RIL,   1, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: none
#define IOCTL_RIL_EMERGENCYSTATUS                   CTL_CODE(FILE_DEVICE_RIL,   2, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of TCHAR's (no longer than MAX_PATH)
// Out: none
#define IOCTL_RIL_INITNOTIFICATIONS                 CTL_CODE(FILE_DEVICE_RIL,   4, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: RILDRVNOTIFICATION*
#define IOCTL_RIL_GETNEXTNOTIFICATION               CTL_CODE(FILE_DEVICE_RIL,   5, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: RILSERIALPORTSTATS*
#define IOCTL_RIL_GETSERIALPORTSTATISTICS           CTL_CODE(FILE_DEVICE_RIL,   6, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETSUBSCRIBERNUMBERS              CTL_CODE(FILE_DEVICE_RIL,   7, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETOPERATORLIST                   CTL_CODE(FILE_DEVICE_RIL,   8, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETPREFERREDOPERATORLIST          CTL_CODE(FILE_DEVICE_RIL,   9, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  ADDPREFERREDOPERATOR_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_ADDPREFERREDOPERATOR              CTL_CODE(FILE_DEVICE_RIL,  10, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_REMOVEPREFERREDOPERATOR           CTL_CODE(FILE_DEVICE_RIL,  11, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTOPERATOR                CTL_CODE(FILE_DEVICE_RIL,  12, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  REGISTERONNETWORK_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_REGISTERONNETWORK                 CTL_CODE(FILE_DEVICE_RIL,  13, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_UNREGISTERFROMNETWORK             CTL_CODE(FILE_DEVICE_RIL,  14, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETREGISTRATIONSTATUS             CTL_CODE(FILE_DEVICE_RIL,  15, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCALLERIDSETTINGS               CTL_CODE(FILE_DEVICE_RIL,  17, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETCALLERIDSTATUS                 CTL_CODE(FILE_DEVICE_RIL,  18, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETHIDEIDSETTINGS                 CTL_CODE(FILE_DEVICE_RIL,  19, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETHIDEIDSTATUS                   CTL_CODE(FILE_DEVICE_RIL,  20, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETDIALEDIDSETTINGS               CTL_CODE(FILE_DEVICE_RIL,  21, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETDIALEDIDSTATUS                 CTL_CODE(FILE_DEVICE_RIL,  22, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCLOSEDGROUPSETTINGS            CTL_CODE(FILE_DEVICE_RIL,  23, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILCLOSEDGROUPSETTINGS*
// Out: HRESULT*
#define IOCTL_RIL_SETCLOSEDGROUPSETTINGS            CTL_CODE(FILE_DEVICE_RIL,  24, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETCALLFORWARDINGSETTINGS         CTL_CODE(FILE_DEVICE_RIL,  25, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  ADDCALLFORWARDING_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_ADDCALLFORWARDING                 CTL_CODE(FILE_DEVICE_RIL,  26, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_REMOVECALLFORWARDING              CTL_CODE(FILE_DEVICE_RIL,  27, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETCALLFORWARDINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETCALLFORWARDINGSTATUS           CTL_CODE(FILE_DEVICE_RIL,  28, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCALLWAITINGSETTINGS            CTL_CODE(FILE_DEVICE_RIL,  29, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETCALLWAITINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETCALLWAITINGSTATUS              CTL_CODE(FILE_DEVICE_RIL,  30, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSUPSERVICEDATA                CTL_CODE(FILE_DEVICE_RIL,  31, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_CANCELSUPSERVICEDATASESSION       CTL_CODE(FILE_DEVICE_RIL,  32, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DIAL_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_DIAL                              CTL_CODE(FILE_DEVICE_RIL,  33, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_ANSWER                            CTL_CODE(FILE_DEVICE_RIL,  34, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_HANGUP                            CTL_CODE(FILE_DEVICE_RIL,  35, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of char's
// Out: HRESULT*
#define IOCTL_RIL_SENDDTMF                          CTL_CODE(FILE_DEVICE_RIL,  36, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  BOOL*
// Out: HRESULT*
#define IOCTL_RIL_SETDTMFMONITORING                 CTL_CODE(FILE_DEVICE_RIL,  37, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  MANAGECALLS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_MANAGECALLS                       CTL_CODE(FILE_DEVICE_RIL,  41, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  TRANSFERCALL_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_TRANSFERCALL                      CTL_CODE(FILE_DEVICE_RIL,  42, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETAUDIOGAIN                      CTL_CODE(FILE_DEVICE_RIL,  44, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  GAININFO*
// Out: HRESULT*
#define IOCTL_RIL_SETAUDIOGAIN                      CTL_CODE(FILE_DEVICE_RIL,  45, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETAUDIODEVICES                   CTL_CODE(FILE_DEVICE_RIL,  46, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  AUDIODEVICEINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETAUDIODEVICES                   CTL_CODE(FILE_DEVICE_RIL,  47, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETAUDIOMUTING                    CTL_CODE(FILE_DEVICE_RIL,  48, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  BOOL*
// Out: HRESULT*
#define IOCTL_RIL_SETAUDIOMUTING                    CTL_CODE(FILE_DEVICE_RIL,  49, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETHSCSDOPTIONS                   CTL_CODE(FILE_DEVICE_RIL,  50, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  HSCSDINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETHSCSDOPTIONS                   CTL_CODE(FILE_DEVICE_RIL,  51, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETHSCSDCALLSETTINGS              CTL_CODE(FILE_DEVICE_RIL,  52, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETDATACOMPRESSION                CTL_CODE(FILE_DEVICE_RIL,  53, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DATACOMPINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETDATACOMPRESSION                CTL_CODE(FILE_DEVICE_RIL,  54, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETERRORCORRECTION                CTL_CODE(FILE_DEVICE_RIL,  55, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  ERRORCORRECTIONINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETERRORCORRECTION                CTL_CODE(FILE_DEVICE_RIL,  56, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETBEARERSERVICEOPTIONS           CTL_CODE(FILE_DEVICE_RIL,  57, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILBEARERSVCINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETBEARERSERVICEOPTIONS           CTL_CODE(FILE_DEVICE_RIL,  58, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETRLPOPTIONS                     CTL_CODE(FILE_DEVICE_RIL,  59, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RLPINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETRLPOPTIONS                     CTL_CODE(FILE_DEVICE_RIL,  60, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETMSGSERVICEOPTIONS              CTL_CODE(FILE_DEVICE_RIL,  61, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILMSGSERVICEINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETMSGSERVICEOPTIONS              CTL_CODE(FILE_DEVICE_RIL,  62, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETMSGCONFIG                      CTL_CODE(FILE_DEVICE_RIL,  63, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILMSGCONFIG*
// Out: HRESULT*
#define IOCTL_RIL_SETMSGCONFIG                      CTL_CODE(FILE_DEVICE_RIL,  64, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_READMSG                           CTL_CODE(FILE_DEVICE_RIL,  68, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_DELETEMSG                         CTL_CODE(FILE_DEVICE_RIL,  69, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  WRITEMSG_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_WRITEMSG                          CTL_CODE(FILE_DEVICE_RIL,  70, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SENDMSG_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SENDMSG                           CTL_CODE(FILE_DEVICE_RIL,  71, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SENDSTOREDMSG_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SENDSTOREDMSG                     CTL_CODE(FILE_DEVICE_RIL,  72, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  BOOL*
// Out: HRESULT*
#define IOCTL_RIL_SENDMSGACKNOWLEDGEMENT            CTL_CODE(FILE_DEVICE_RIL,  73, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETUSERIDENTITY                   CTL_CODE(FILE_DEVICE_RIL,  74, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETPHONELOCKEDSTATE               CTL_CODE(FILE_DEVICE_RIL,  75, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  UNLOCKPHONE_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_UNLOCKPHONE                       CTL_CODE(FILE_DEVICE_RIL,  76, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  GETLOCKINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_GETLOCKINGSTATUS                  CTL_CODE(FILE_DEVICE_RIL,  77, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETLOCKINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETLOCKINGSTATUS                  CTL_CODE(FILE_DEVICE_RIL,  78, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  CHANGELOCKINGPASSWORD_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_CHANGELOCKINGPASSWORD             CTL_CODE(FILE_DEVICE_RIL,  79, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  GETCALLBARRINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_GETCALLBARRINGSTATUS              CTL_CODE(FILE_DEVICE_RIL,  80, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETCALLBARRINGSTATUS_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETCALLBARRINGSTATUS              CTL_CODE(FILE_DEVICE_RIL,  81, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  CHANGECALLBARRINGPASSWORD_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_CHANGECALLBARRINGPASSWORD         CTL_CODE(FILE_DEVICE_RIL,  82, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETEQUIPMENTINFO                  CTL_CODE(FILE_DEVICE_RIL,  83, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETEQUIPMENTSTATE                 CTL_CODE(FILE_DEVICE_RIL,  84, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETEQUIPMENTSTATE                 CTL_CODE(FILE_DEVICE_RIL,  85, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETPHONEBOOKOPTIONS               CTL_CODE(FILE_DEVICE_RIL,  86, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILPHONEBOOKINFO*
// Out: HRESULT*
#define IOCTL_RIL_SETPHONEBOOKOPTIONS               CTL_CODE(FILE_DEVICE_RIL,  87, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  READPHONEBOOKENTRIES_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_READPHONEBOOKENTRIES              CTL_CODE(FILE_DEVICE_RIL,  88, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILPHONEBOOKENTRY*
// Out: HRESULT*
#define IOCTL_RIL_WRITEPHONEBOOKENTRY               CTL_CODE(FILE_DEVICE_RIL,  89, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_DELETEPHONEBOOKENTRY              CTL_CODE(FILE_DEVICE_RIL,  90, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSIMCMD                        CTL_CODE(FILE_DEVICE_RIL,  92, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  pointer to SENDRESTRICTEDSIMCMD_PARAMS
// Out: HRESULT*
#define IOCTL_RIL_SENDRESTRICTEDSIMCMD              CTL_CODE(FILE_DEVICE_RIL,  93, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETSIMRECORDSTATUS                CTL_CODE(FILE_DEVICE_RIL,  94, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETSIMTOOLKITPROFILE              CTL_CODE(FILE_DEVICE_RIL,  95, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SETSIMTOOLKITPROFILE              CTL_CODE(FILE_DEVICE_RIL,  96, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSIMTOOLKITENVELOPECMD         CTL_CODE(FILE_DEVICE_RIL,  97, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_FETCHSIMTOOLKITCMD                CTL_CODE(FILE_DEVICE_RIL,  98, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSIMTOOLKITCMDRESPONSE         CTL_CODE(FILE_DEVICE_RIL,  99, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD
// Out: HRESULT*
#define IOCTL_RIL_TERMINATESIMTOOLKITSESSION        CTL_CODE(FILE_DEVICE_RIL, 100, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCOSTINFO                       CTL_CODE(FILE_DEVICE_RIL, 101, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETCOSTINFO_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETCOSTINFO                       CTL_CODE(FILE_DEVICE_RIL, 102, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETCOSTINFO_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_GETSIGNALQUALITY                  CTL_CODE(FILE_DEVICE_RIL, 103, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCELLTOWERINFO                  CTL_CODE(FILE_DEVICE_RIL, 104, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_DEVSPECIFIC                       CTL_CODE(FILE_DEVICE_RIL, 105, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETDEVCAPS                        CTL_CODE(FILE_DEVICE_RIL, 106, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETHIDECONNECTEDIDSETTINGS        CTL_CODE(FILE_DEVICE_RIL, 107, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETHIDECONNECTEDIDSTATUS          CTL_CODE(FILE_DEVICE_RIL, 108, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETCCBSSTATUS                     CTL_CODE(FILE_DEVICE_RIL, 113, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_CLEARCCBSREGISTRATION             CTL_CODE(FILE_DEVICE_RIL, 114, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETSYSTEMTIME                     CTL_CODE(FILE_DEVICE_RIL, 115, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSCONTEXTLIST                CTL_CODE(FILE_DEVICE_RIL, 116, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILGPRSCONTEXT*
// Out: HRESULT*
#define IOCTL_RIL_SETGPRSCONTEXT                    CTL_CODE(FILE_DEVICE_RIL, 117, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_DELETEGPRSCONTEXT                 CTL_CODE(FILE_DEVICE_RIL, 118, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETREQUESTEDQUALITYOFSERVICELIST  CTL_CODE(FILE_DEVICE_RIL, 119, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILGPRSQOSPROFILE*
// Out: HRESULT*
#define IOCTL_RIL_SETREQUESTEDQUALITYOFSERVICE      CTL_CODE(FILE_DEVICE_RIL, 120, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_DELETEREQUESTEDQUALITYOFSERVICE   CTL_CODE(FILE_DEVICE_RIL, 121, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETMINIMUMQUALITYOFSERVICELIST    CTL_CODE(FILE_DEVICE_RIL, 122, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILGPRSQOSPROFILE*
// Out: HRESULT*
#define IOCTL_RIL_SETMINIMUMQUALITYOFSERVICE        CTL_CODE(FILE_DEVICE_RIL, 123, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_DELETEMINIMUMQUALITYOFSERVICE     CTL_CODE(FILE_DEVICE_RIL, 124, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  BOOL*
// Out: HRESULT*
#define IOCTL_RIL_SETGPRSATTACHED                   CTL_CODE(FILE_DEVICE_RIL, 125, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSATTACHED                   CTL_CODE(FILE_DEVICE_RIL, 126, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  SETGPRSCONTEXTACTIVATED_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_SETGPRSCONTEXTACTIVATED           CTL_CODE(FILE_DEVICE_RIL, 127, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSCONTEXTACTIVATEDLIST       CTL_CODE(FILE_DEVICE_RIL, 128, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  ENTERGPRSDATAMODE_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_ENTERGPRSDATAMODE                 CTL_CODE(FILE_DEVICE_RIL, 129, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSADDRESS                    CTL_CODE(FILE_DEVICE_RIL, 130, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  GPRSANSWER_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_GPRSANSWER                        CTL_CODE(FILE_DEVICE_RIL, 131, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSREGISTRATIONSTATUS         CTL_CODE(FILE_DEVICE_RIL, 132, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETGPRSCLASS                      CTL_CODE(FILE_DEVICE_RIL, 133, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETGPRSCLASS                      CTL_CODE(FILE_DEVICE_RIL, 134, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETMOSMSSERVICE                   CTL_CODE(FILE_DEVICE_RIL, 135, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETMOSMSSERVICE                   CTL_CODE(FILE_DEVICE_RIL, 136, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: DWORD*
#define IOCTL_RIL_GETDRIVERVERSION                  CTL_CODE(FILE_DEVICE_RIL, 137, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCBMSGCONFIG                    CTL_CODE(FILE_DEVICE_RIL, 138, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILCBMSGCONFIG*
// Out: HRESULT*
#define IOCTL_RIL_SETCBMSGCONFIG                    CTL_CODE(FILE_DEVICE_RIL, 139, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTADDRESSID               CTL_CODE(FILE_DEVICE_RIL, 140, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETCURRENTADDRESSID               CTL_CODE(FILE_DEVICE_RIL, 141, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: DWORD*
#define IOCTL_RIL_GETLASTERROR                      CTL_CODE(FILE_DEVICE_RIL, 142, METHOD_BUFFERED, FILE_ANY_ACCESS)


// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETPACKETBYTECOUNT                CTL_CODE(FILE_DEVICE_RIL, 143, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_RESETPACKETBYTECOUNT              CTL_CODE(FILE_DEVICE_RIL, 144, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTSYSTEMTYPE              CTL_CODE(FILE_DEVICE_RIL, 146, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILADDRESS*
// Out: HRESULT*
#define IOCTL_RIL_SENDFLASH                         CTL_CODE(FILE_DEVICE_RIL, 147, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETROAMINGMODE                    CTL_CODE(FILE_DEVICE_RIL, 148, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETROAMINGMODE                    CTL_CODE(FILE_DEVICE_RIL, 149, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETPREFERREDPRIVACYMODE           CTL_CODE(FILE_DEVICE_RIL, 150, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD*
// Out: HRESULT*
#define IOCTL_RIL_SETPREFERREDPRIVACYMODE           CTL_CODE(FILE_DEVICE_RIL, 151, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTPRIVACYSTATUS           CTL_CODE(FILE_DEVICE_RIL, 152, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  LPCSTR
// Out: HRESULT*    
#define IOCTL_RIL_SENDAKEY                          CTL_CODE(FILE_DEVICE_RIL, 153, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETALLOPERATORSLIST               CTL_CODE(FILE_DEVICE_RIL, 154, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  BOOL*
// Out: HRESULT*    
#define IOCTL_RIL_REGISTER_AT_LOGGING               CTL_CODE(FILE_DEVICE_RIL, 155, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  LPTSTR
// Out: HRESULT*    
#define IOCTL_RIL_ATCOMMAND_LOGFILE                 CTL_CODE(FILE_DEVICE_RIL, 156, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  DWORD, BOOL
// Out: HRESULT*
#define IOCTL_RIL_NDIS_SETGPRSCONTEXTACTIVATED      CTL_CODE(FILE_DEVICE_RIL, 159, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTLOCATIONSTATUS          CTL_CODE(FILE_DEVICE_RIL, 160, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETCURRENTROAMINGSTATUS           CTL_CODE(FILE_DEVICE_RIL, 161, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETATR                            CTL_CODE(FILE_DEVICE_RIL, 162, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSIMTOOLKITEVENTDOWNLOAD       CTL_CODE(FILE_DEVICE_RIL,  163, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  *DWORD, TCHAR*
// Out: TCHAR*
#define IOCTL_RIL_GETSERIALPORTHANDLEFROMCONTEXTID  CTL_CODE(FILE_DEVICE_RIL, 164, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  LPCSTR
// OUT: HRESULT*
#define IOCTL_RIL_LOGEVENTTORADIO                   CTL_CODE(FILE_DEVICE_RIL, 165, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: TCHAR*, DWORD
#define IOCTL_RIL_GETVTSERIALPORTHANDLE             CTL_CODE(FILE_DEVICE_RIL, 166, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  array of BYTE's
// Out: HRESULT*
#define IOCTL_RIL_SENDSECUREMMISTRING               CTL_CODE(FILE_DEVICE_RIL, 167, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_DATADORMANT                       CTL_CODE(FILE_DEVICE_RIL, 168, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  CHANGECALLBARRINGPASSWORDEX_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_CHANGECALLBARRINGPASSWORDEX       CTL_CODE(FILE_DEVICE_RIL,  169, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  LPCSTR
// OUT: HRESULT*
#define IOCTL_RIL_STARTDTMF                         CTL_CODE(FILE_DEVICE_RIL, 170, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// OUT: HRESULT*
#define IOCTL_RIL_STOPDTMF                          CTL_CODE(FILE_DEVICE_RIL, 171, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  none
// Out: HRESULT*
#define IOCTL_RIL_GETSIMINFO                        CTL_CODE(FILE_DEVICE_RIL,  172, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  READPHONEBOOKENTRIES_PARAMS*
// Out: HRESULT*
#define IOCTL_RIL_READPHONEBOOKENTRIESEX            CTL_CODE(FILE_DEVICE_RIL,  173, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILPHONEBOOKENTRYEX*
// Out: HRESULT*
#define IOCTL_RIL_WRITEPHONEBOOKENTRYEX             CTL_CODE(FILE_DEVICE_RIL,  174, METHOD_BUFFERED, FILE_ANY_ACCESS)

// In:  RILPOSITIONINFO*
// Out: HRESULT*
#define IOCTL_RIL_GETPOSITIONINFO                   CTL_CODE(FILE_DEVICE_RIL,  175, METHOD_BUFFERED, FILE_ANY_ACCESS)

// Constants specifying the registry location of any externally accessible registry keys
#define RIL_LAST_EQUIPMENT_STATE_ROOT               (HKEY_LOCAL_MACHINE)
#define RIL_LAST_EQUIPMENT_STATE_KEY                (TEXT("Software\\Microsoft\\RIL"))
#define RIL_LAST_EQUIPMENT_STATE_VALUE              (TEXT("LastEquipmentState"))
#define RIL_LAST_BOOTED_EQUIPMENT_STATE_VALUE       (TEXT("LastBootedEquipmentState"))
#define CONVERT_RIL_INFOCALSS_NONE                  (TEXT("ConvertInfoClassNone"))
#define CONVERT_RIL_INFOCALSS_NONE_YES              1
#define CONVERT_RIL_INFOCALSS_NONE_NO               0

// OEM defined supported MMI service code list is at \\HKLM\\Comm\\Cellular
// The string type value is comma(or blank space) delimited, such as "21,67,61,62,30,31"
#define RIL_MMI_SERVICE_CODE_KEY                    (TEXT("Comm\\Cellular"))
#define RIL_MMI_SERVICE_CODE_VALUE                  (TEXT("ValidMMIServiceCode"))
#define MAXLENGTH_MMI_SERVICE_CODE_LIST             512
#define MAXLENGTH_MMI_SERVICE_CODE                  3
#define MINLENGTH_MMI_SERVICE_CODE                  2
#define MAXLENGTH_MMI_STRING_PREFIX                 2


//
// Data types
//

// Notification data
#pragma warning(disable : 4200) // Disable "C4200: nonstandard extension used : zero-sized array in struct/union"
typedef struct rildrvnotification_tag {
    DWORD cbSize;
    DWORD cbSizeNeeded;
    DWORD dwCode;
    HRESULT hrCmdID;
    BYTE pbData[];
} RILDRVNOTIFICATION, *LPRILDRVNOTIFICATION;
#pragma warning(default : 4200)

// Parameter and result structures
typedef struct addpreferredoperator_params_tag {
    DWORD dwIndex;
    RILOPERATORNAMES ronOperatorNames;
} ADDPREFERREDOPERATOR_PARAMS, *LPADDPREFERREDOPERATOR_PARAMS;

typedef struct registeronnetwork_params_tag {
    DWORD dwMode;
    RILOPERATORNAMES ronOperatorNames;
} REGISTERONNETWORK_PARAMS, *LPREGISTERONNETWORK_PARAMS;

typedef struct changesubscriberprofilepassword_params_tag {
    char szOldPassword[MAXLENGTH_PASSWORD];
    char szNewPassword[MAXLENGTH_PASSWORD];
} CHANGESUBSCRIBERPROFILEPASSWORD_PARAMS, *LPCHANGESUBSCRIBERPROFILEPASSWORD_PARAMS;

typedef struct getcallforwarding_params_tag {
    DWORD dwReason;
    DWORD dwInfoClasses;
} GETCALLFORWARDING_PARAMS, *LPGETCALLFORWARDING_PARAMS;

typedef struct addcallforwarding_params_tag {
    DWORD dwReason;
    RILCALLFORWARDINGSETTINGS rcfsSettings;
} ADDCALLFORWARDING_PARAMS, *LPADDCALLFORWARDING_PARAMS;

typedef struct removecallforwarding_params_tag {
    DWORD dwReason;
    DWORD dwInfoClasses;
} REMOVECALLFORWARDING_PARAMS, *LPREMOVECALLFORWARDING_PARAMS;

typedef struct setcallforwardingstatus_params_params_tag {
    DWORD dwReason;
    DWORD dwInfoClasses;
    DWORD dwStatus;
} SETCALLFORWARDINGSTATUS_PARAMS, *LPSETCALLFORWARDINGSTATUS_PARAMS;

typedef struct getcallwaitingstatus_params_tag {
    DWORD dwInfoClasses;
} GETCALLWAITINGSTATUS_PARAMS, *LPGETCALLWAITINGSTATUS_PARAMS;

typedef struct setcallwaitingstatus_params_tag {
    DWORD dwInfoClasses;
    DWORD dwStatus;
} SETCALLWAITINGSTATUS_PARAMS, *LPSETCALLWAITINGSTATUS_PARAMS;

typedef struct dial_params_tag {
    char szAddress[MAXLENGTH_ADDRESS];
    DWORD dwType;
    DWORD dwOptions;
} DIAL_PARAMS, *LPDIAL_PARAMS;

typedef struct senddtmf_params_tag {
    char szDTMF[MAXLENGTH_DTMF];
    DWORD dwDuration;
} SENDDTMF_PARAMS, *LPSENDDTMF_PARAMS;

typedef struct managecalls_params_tag {
    DWORD dwCommand;
    DWORD dwID;
} MANAGECALLS_PARAMS, *LPMANAGECALLS_PARAMS;

typedef struct transfercall_params_tag {
    RILADDRESS raAddress;
    BOOL fSubAddress;
    RILSUBADDRESS rsaSubAddress;
} TRANSFERCALL_PARAMS, *LPTRANSFERCALL_PARAMS;

typedef struct writemsg_params_tag {
    RILMESSAGE rmMessage;
    DWORD dwStatus;
} WRITEMSG_PARAMS, *LPWRITEMSG_PARAMS;

typedef struct sendmsg_params_tag {
    RILMESSAGE rmMessage;
    DWORD dwOptions;
} SENDMSG_PARAMS, *LPSENDMSG_PARAMS;

typedef struct sendstoredmsg_params_tag {
    DWORD dwIndex;
    DWORD dwOptions;
} SENDSTOREDMSG_PARAMS, *LPSENDSTOREDMSG_PARAMS;

typedef struct unlockphone_params_tag {
    char szPassword[MAXLENGTH_PASSWORD];
    BOOL fNewPassword;
    char szNewPassword[MAXLENGTH_PASSWORD];
} UNLOCKPHONE_PARAMS, *LPUNLOCKPHONE_PARAMS;

typedef struct getlockingstatus_params_tag {
    DWORD dwFacility;
    BOOL fPassword;
    char szPassword[MAXLENGTH_PASSWORD];
} GETLOCKINGSTATUS_PARAMS, *LPGETLOCKINGSTATUS_PARAMS;

typedef struct setlockingstatus_params_tag {
    DWORD dwFacility;
    BOOL fPassword;
    char szPassword[MAXLENGTH_PASSWORD];
    DWORD dwStatus;
} SETLOCKINGSTATUS_PARAMS, *LPSETLOCKINGSTATUS_PARAMS;

typedef struct changelockingpassword_params_tag {
    DWORD dwFacility;
    DWORD dwOldPasswordType;
    char szOldPassword[MAXLENGTH_PASSWORD];
    char szNewPassword[MAXLENGTH_PASSWORD];
} CHANGELOCKINGPASSWORD_PARAMS, *LPCHANGELOCKINGPASSWORD_PARAMS;

typedef struct getcallbarringstatus_params_tag {
    DWORD dwType;
    DWORD dwInfoClass;
    BOOL fPassword;
    char szPassword[MAXLENGTH_PASSWORD];
} GETCALLBARRINGSTATUS_PARAMS, *LPGETCALLBARRINGSTATUS_PARAMS;

typedef struct setcallbarringstatus_params_tag {
    DWORD dwType;
    DWORD dwInfoClass;
    BOOL fPassword;
    char szPassword[MAXLENGTH_PASSWORD];
    DWORD dwStatus;
} SETCALLBARRINGSTATUS_PARAMS, *LPSETCALLBARRINGSTATUS_PARAMS;

typedef struct changecallbarringpassword_params_tag {
    DWORD dwType;
    char szOldPassword[MAXLENGTH_PASSWORD];
    char szNewPassword[MAXLENGTH_PASSWORD];
} CHANGECALLBARRINGPASSWORD_PARAMS, *LPCHANGECALLBARRINGPASSWORD_PARAMS;

typedef struct changecallbarringpasswordex_params_tag {
    DWORD dwType;
    char szOldPassword[MAXLENGTH_PASSWORD];
    char szNewPassword[MAXLENGTH_PASSWORD];
    char szNewPasswordConfirm[MAXLENGTH_PASSWORD];
} CHANGECALLBARRINGPASSWORDEX_PARAMS, *LPCHANGECALLBARRINGPASSWORDEX_PARAMS;

typedef struct readphonebookentries_params_tag {
    DWORD dwStartIndex;
    DWORD dwEndIndex;
} READPHONEBOOKENTRIES_PARAMS, *LPREADPHONEBOOKENTRIES_PARAMS;

#pragma warning(disable : 4200) // Disable "C4200: nonstandard extension used : zero-sized array in struct/union"
typedef struct sendsimcnd_params_tag {
    DWORD dwCommand;
    RILSIMCMDPARAMETERS rscpParameters;
    BYTE pbData[];
} SENDRESTRICTEDSIMCMD_PARAMS, *LPSENDRESTRICTEDSIMCMD_PARAMS;
#pragma warning(default : 4200)

typedef struct setcostinfo_params_tag {
    RILCOSTINFO rciCostInfo;
    BOOL fPassword;
    char szPassword[MAXLENGTH_PASSWORD];
} SETCOSTINFO_PARAMS, *LPSETCOSTINFO_PARAMS;

typedef struct getcurrentsubscriberprofile_params_tag {
    char szPassword[MAXLENGTH_PASSWORD];
    BOOL fPassword;
} GETCURRENTSUBSCRIBERPROFILE_PARAMS, *LPGETCURRENTSUBSCRIBERPROFILE_PARAMS;

typedef struct setcurrentsubscriberprofile_params_tag {
    char szPassword[MAXLENGTH_PASSWORD];
    BOOL fPassword;
    DWORD dwProfileIndex;
} SETCURRENTSUBSCRIBERPROFILE_PARAMS, *LPSETCURRENTSUBSCRIBERPROFILE_PARAMS;

typedef struct setgprscontextactivated_params_tag
{
    DWORD dwContextID;
    BOOL fContextActivation;
} SETGPRSCONTEXTACTIVATED_PARAMS, *LPSETGPRSCONTEXTACTIVATED;

#pragma warning(disable : 4200) // Disable "C4200: nonstandard extension used : zero-sized array in struct/union"
typedef struct sendsimtoolkitcmdresponse_params_tag
{
    RILSIMTOOLKITRSP rstrRsp;
    BYTE pbDetails[];
} SENDSIMTOOLKITCMDRESPONSE_PARAMS, *LPSENDSIMTOOLKITCMDRESPONSE_PARAMS;
#pragma warning(default : 4200)

#pragma warning(disable : 4200) // Disable "C4200: nonstandard extension used : zero-sized array in struct/union"
typedef struct sendsimtoolkiteventdownload_params_tag
{
    DWORD dwEvent;
    BYTE pbData[];
} SENDSIMTOOLKITEVENTDOWNLOAD_PARAMS, *LPSENDSIMTOOLKITEVENTDOWNLOAD_PARAMS;
#pragma warning(default : 4200)

#ifdef __cplusplus
}
#endif


#endif // _RILDRV_H_

