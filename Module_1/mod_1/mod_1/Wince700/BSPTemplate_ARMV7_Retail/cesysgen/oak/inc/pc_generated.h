//
// Copyright (c) Microsoft Corporation.  All rights reserved.
//
//
// Use of this sample source code is subject to the terms of the Microsoft
// license agreement under which you licensed this sample source code. If
// you did not accept the terms of the license agreement, you are not
// authorized to use this sample source code. For the terms of the license,
// please see the license agreement between you and Microsoft or, if applicable,
// see the LICENSE.RTF on your install media or the root of your tools installation.
// THE SAMPLE SOURCE CODE IS PROVIDED "AS IS", WITH NO WARRANTIES OR INDEMNITIES.
//

#if 0
    DO NOT EDIT THIS FILE. IT IS AUTO GENERATED. 
    Please see: developr/igord/py/pc_marshal.h 

    IF YOU NEED TO CHANGE THIS FILE, make changes to generating template.
#endif 

#if 0

    template<>
    DWORD call(WORD wFunction )
    {
        detail::pc_message0<_extra_info_t > message(wFunction, m_ExtraInfo );

        return prepare_message_and_pc_call(message);
    };


    template<typename T1>
    DWORD call(WORD wFunction,  T1 arg1)
    {
        detail::pc_message1<_extra_info_t,  T1> message(wFunction, m_ExtraInfo,  arg1);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2)
    {
        detail::pc_message2<_extra_info_t,  T1, T2> message(wFunction, m_ExtraInfo,  arg1, arg2);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3)
    {
        detail::pc_message3<_extra_info_t,  T1, T2, T3> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4)
    {
        detail::pc_message4<_extra_info_t,  T1, T2, T3, T4> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5)
    {
        detail::pc_message5<_extra_info_t,  T1, T2, T3, T4, T5> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6)
    {
        detail::pc_message6<_extra_info_t,  T1, T2, T3, T4, T5, T6> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7)
    {
        detail::pc_message7<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8)
    {
        detail::pc_message8<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9)
    {
        detail::pc_message9<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10)
    {
        detail::pc_message10<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11)
    {
        detail::pc_message11<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12)
    {
        detail::pc_message12<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);

        return prepare_message_and_pc_call(message);
    };


    template<typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13>
    DWORD call(WORD wFunction,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13)
    {
        detail::pc_message13<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> message(wFunction, m_ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13);

        return prepare_message_and_pc_call(message);
    };

#endif

template<typename _extra_info_t, typename T1> 
class pc_message1 : public pc_message0<_extra_info_t >
{
public:
    typedef pc_message1<_extra_info_t, T1> my_T;
    typedef pc_message0<_extra_info_t > my_base;
    typedef pc_data_wrapper<T1> my_data_wrapper;

    pc_message1(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1) 
        : my_base(wFunction, ExtraInfo )
        ,m_x1(arg1) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg1 (Stream& Stream) {
        return m_x1.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x1.marshal(stream,rhs.m_x1);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x1.write_back(rhs.m_x1.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x1; 
};


template<typename _extra_info_t, typename T1, typename T2> 
class pc_message2 : public pc_message1<_extra_info_t,  T1>
{
public:
    typedef pc_message2<_extra_info_t, T1, T2> my_T;
    typedef pc_message1<_extra_info_t,  T1> my_base;
    typedef pc_data_wrapper<T2> my_data_wrapper;

    pc_message2(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2) 
        : my_base(wFunction, ExtraInfo,  arg1)
        ,m_x2(arg2) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg2 (Stream& Stream) {
        return m_x2.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x2.marshal(stream,rhs.m_x2);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x2.write_back(rhs.m_x2.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x2; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3> 
class pc_message3 : public pc_message2<_extra_info_t,  T1, T2>
{
public:
    typedef pc_message3<_extra_info_t, T1, T2, T3> my_T;
    typedef pc_message2<_extra_info_t,  T1, T2> my_base;
    typedef pc_data_wrapper<T3> my_data_wrapper;

    pc_message3(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2)
        ,m_x3(arg3) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg3 (Stream& Stream) {
        return m_x3.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x3.marshal(stream,rhs.m_x3);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x3.write_back(rhs.m_x3.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x3; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4> 
class pc_message4 : public pc_message3<_extra_info_t,  T1, T2, T3>
{
public:
    typedef pc_message4<_extra_info_t, T1, T2, T3, T4> my_T;
    typedef pc_message3<_extra_info_t,  T1, T2, T3> my_base;
    typedef pc_data_wrapper<T4> my_data_wrapper;

    pc_message4(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3)
        ,m_x4(arg4) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg4 (Stream& Stream) {
        return m_x4.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x4.marshal(stream,rhs.m_x4);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x4.write_back(rhs.m_x4.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x4; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5> 
class pc_message5 : public pc_message4<_extra_info_t,  T1, T2, T3, T4>
{
public:
    typedef pc_message5<_extra_info_t, T1, T2, T3, T4, T5> my_T;
    typedef pc_message4<_extra_info_t,  T1, T2, T3, T4> my_base;
    typedef pc_data_wrapper<T5> my_data_wrapper;

    pc_message5(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4)
        ,m_x5(arg5) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg5 (Stream& Stream) {
        return m_x5.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x5.marshal(stream,rhs.m_x5);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x5.write_back(rhs.m_x5.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x5; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> 
class pc_message6 : public pc_message5<_extra_info_t,  T1, T2, T3, T4, T5>
{
public:
    typedef pc_message6<_extra_info_t, T1, T2, T3, T4, T5, T6> my_T;
    typedef pc_message5<_extra_info_t,  T1, T2, T3, T4, T5> my_base;
    typedef pc_data_wrapper<T6> my_data_wrapper;

    pc_message6(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5)
        ,m_x6(arg6) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg6 (Stream& Stream) {
        return m_x6.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x6.marshal(stream,rhs.m_x6);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x6.write_back(rhs.m_x6.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x6; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> 
class pc_message7 : public pc_message6<_extra_info_t,  T1, T2, T3, T4, T5, T6>
{
public:
    typedef pc_message7<_extra_info_t, T1, T2, T3, T4, T5, T6, T7> my_T;
    typedef pc_message6<_extra_info_t,  T1, T2, T3, T4, T5, T6> my_base;
    typedef pc_data_wrapper<T7> my_data_wrapper;

    pc_message7(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6)
        ,m_x7(arg7) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg7 (Stream& Stream) {
        return m_x7.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x7.marshal(stream,rhs.m_x7);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x7.write_back(rhs.m_x7.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x7; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> 
class pc_message8 : public pc_message7<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7>
{
public:
    typedef pc_message8<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8> my_T;
    typedef pc_message7<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7> my_base;
    typedef pc_data_wrapper<T8> my_data_wrapper;

    pc_message8(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7)
        ,m_x8(arg8) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg8 (Stream& Stream) {
        return m_x8.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x8.marshal(stream,rhs.m_x8);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x8.write_back(rhs.m_x8.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x8; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> 
class pc_message9 : public pc_message8<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8>
{
public:
    typedef pc_message9<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8, T9> my_T;
    typedef pc_message8<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8> my_base;
    typedef pc_data_wrapper<T9> my_data_wrapper;

    pc_message9(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
        ,m_x9(arg9) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg9 (Stream& Stream) {
        return m_x9.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x9.marshal(stream,rhs.m_x9);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x9.write_back(rhs.m_x9.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x9; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> 
class pc_message10 : public pc_message9<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9>
{
public:
    typedef pc_message10<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> my_T;
    typedef pc_message9<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9> my_base;
    typedef pc_data_wrapper<T10> my_data_wrapper;

    pc_message10(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9)
        ,m_x10(arg10) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg10 (Stream& Stream) {
        return m_x10.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x10.marshal(stream,rhs.m_x10);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x10.write_back(rhs.m_x10.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x10; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11> 
class pc_message11 : public pc_message10<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
{
public:
    typedef pc_message11<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> my_T;
    typedef pc_message10<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> my_base;
    typedef pc_data_wrapper<T11> my_data_wrapper;

    pc_message11(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10)
        ,m_x11(arg11) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg11 (Stream& Stream) {
        return m_x11.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x11.marshal(stream,rhs.m_x11);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x11.write_back(rhs.m_x11.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x11; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12> 
class pc_message12 : public pc_message11<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
{
public:
    typedef pc_message12<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> my_T;
    typedef pc_message11<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> my_base;
    typedef pc_data_wrapper<T12> my_data_wrapper;

    pc_message12(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11)
        ,m_x12(arg12) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg12 (Stream& Stream) {
        return m_x12.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x12.marshal(stream,rhs.m_x12);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x12.write_back(rhs.m_x12.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x12; 
};


template<typename _extra_info_t, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10, typename T11, typename T12, typename T13> 
class pc_message13 : public pc_message12<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
{
public:
    typedef pc_message13<_extra_info_t, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> my_T;
    typedef pc_message12<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> my_base;
    typedef pc_data_wrapper<T13> my_data_wrapper;

    pc_message13(WORD wFunction, _extra_info_t ExtraInfo,  T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8, T9 arg9, T10 arg10, T11 arg11, T12 arg12, T13 arg13) 
        : my_base(wFunction, ExtraInfo,  arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12)
        ,m_x13(arg13) 
    { 
    }

    typename my_data_wrapper::data_type unmarshal_arg13 (Stream& Stream) {
        return m_x13.unmarshal(Stream); 
    } 

    DWORD marshal(AppendStream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::marshal(stream,rhs);
        if (ret != NO_ERROR) 
        {
            assert(false);
            return ret;
        }
        return  m_x13.marshal(stream,rhs.m_x13);
    }

    DWORD write_back(Stream& stream, const my_T& rhs)
    {
        DWORD ret = my_base::write_back(stream,rhs);
        if (ret != NO_ERROR)
        {
            assert(false);
            return ret; 
        }
        return  m_x13.write_back(rhs.m_x13.unmarshal(stream));
    } 

protected:
    my_data_wrapper   m_x13; 
};


#   define PC_STUB_CALL_0_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message0<_extra_info_t > message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
             ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_1_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message1<_extra_info_t,  T1> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_2_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message2<_extra_info_t,  T1, T2> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_3_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message3<_extra_info_t,  T1, T2, T3> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_4_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message4<_extra_info_t,  T1, T2, T3, T4> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_5_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message5<_extra_info_t,  T1, T2, T3, T4, T5> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_6_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message6<_extra_info_t,  T1, T2, T3, T4, T5, T6> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_7_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message7<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_8_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message8<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_9_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message9<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
, pMessage->unmarshal_arg9(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_10_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message10<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
, pMessage->unmarshal_arg9(m_Stream)   \
, pMessage->unmarshal_arg10(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_11_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message11<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
, pMessage->unmarshal_arg9(m_Stream)   \
, pMessage->unmarshal_arg10(m_Stream)   \
, pMessage->unmarshal_arg11(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_12_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message12<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
, pMessage->unmarshal_arg9(m_Stream)   \
, pMessage->unmarshal_arg10(m_Stream)   \
, pMessage->unmarshal_arg11(m_Stream)   \
, pMessage->unmarshal_arg12(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }




#   define PC_STUB_CALL_13_ARG(FUNC, ARG)     \
    {                                      \
        typedef detail::pc_message13<_extra_info_t,  T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> message_t;  \
        message_t* pMessage = reinterpret_cast<message_t*>(m_pMessage0);    \
                                                        \
        if(!pMessage || m_nInBufferSize <  sizeof(*pMessage)  )   \
            return error<T>(ERROR_INVALID_PARAMETER);             \
                                                                  \
        __try                                                     \
        {                                                         \
            return (FUNC) \
            (ARG                                     \
  pMessage->unmarshal_arg1(m_Stream)   \
, pMessage->unmarshal_arg2(m_Stream)   \
, pMessage->unmarshal_arg3(m_Stream)   \
, pMessage->unmarshal_arg4(m_Stream)   \
, pMessage->unmarshal_arg5(m_Stream)   \
, pMessage->unmarshal_arg6(m_Stream)   \
, pMessage->unmarshal_arg7(m_Stream)   \
, pMessage->unmarshal_arg8(m_Stream)   \
, pMessage->unmarshal_arg9(m_Stream)   \
, pMessage->unmarshal_arg10(m_Stream)   \
, pMessage->unmarshal_arg11(m_Stream)   \
, pMessage->unmarshal_arg12(m_Stream)   \
, pMessage->unmarshal_arg13(m_Stream)   \
           ); \
        }                                                         \
        __except(EXCEPTION_EXECUTE_HANDLER)                       \
        {                                                         \
            return error<T>(ERROR_EXCEPTION_IN_SERVICE);          \
        }                                                         \
    }



